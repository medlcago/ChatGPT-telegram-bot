from aiogram import Router, F, types, flags, Bot
from aiogram.fsm.context import FSMContext

from data.config import Config
from keyboards.inline import get_confirmation_button, SendMessage, get_reply_to_user_button
from states.users import Users

command_contact_admin_router = Router()


@command_contact_admin_router.callback_query(F.data.in_({"contact_admin"}))
@flags.skip
async def command_contact_admin(call: types.CallbackQuery, state: FSMContext):
    await call.answer("–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    message_reply = """–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π <b><i>/cancel</i></b>\n
<b>–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ <i>24 —á–∞—Å–æ–≤</i></b>\n
‚ùó–ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–≥–æ –Ω–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç."""
    await call.message.answer(message_reply)
    await state.set_state(Users.ContactAdmin.message)


@command_contact_admin_router.message(F.content_type.in_({"text"}), Users.ContactAdmin.message)
@flags.skip
async def message_to_administrator(message: types.Message, state: FSMContext):
    message_to_admin = message.text
    await state.update_data(message=message)
    await message.answer(
        f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message_to_admin}\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ <b><i>24 —á–∞—Å–æ–≤</i></b>",
        reply_markup=get_confirmation_button("creator").as_markup())
    await state.set_state(Users.ContactAdmin.confirmation)


@command_contact_admin_router.callback_query(Users.ContactAdmin.confirmation, SendMessage.filter((F.action == "confirmation") & (F.recipients == "creator")))
@flags.skip
async def confirmation_send_message(call: types.CallbackQuery, state: FSMContext, bot: Bot, config: Config):
    message: types.Message = (await state.get_data()).get("message")
    creator_user_id = config.creator_user_id
    message_id = message.message_id
    user_id = message.from_user.id
    message_to_admin = f"""üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <b>{user_id}</b>\n
{message.text}"""

    markup = get_reply_to_user_button(user_id, message_id).as_markup()

    await call.message.delete()
    await bot.send_message(chat_id=creator_user_id, text=message_to_admin, reply_markup=markup)
    await call.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
                              reply_to_message_id=message_id)
    await call.answer("OK!")
    await state.clear()


@command_contact_admin_router.callback_query(Users.ContactAdmin.confirmation, SendMessage.filter((F.action == "cancel") & (F.recipients == "creator")))
@flags.skip
async def cancel_send_message(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
